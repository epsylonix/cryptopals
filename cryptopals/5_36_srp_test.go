package cryptopals

import (
	"bytes"
	"math/big"
	"testing"
)

func TestSrp(t *testing.T) {
	g := big.NewInt(int64(2))
	n, _ := new(big.Int).SetString("ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff", 16)

	// client-side data
	srpCl := srpClient{[]byte("user"), []byte("pass"), g, n}

	// server-side data (stores salt and verifier that are generated by the client initially)
	salt, v := srpCl.genVerifier()
	srpSer := srpServer{srpCl.username, salt, v, g, n}

	// init session for client
	clSession := new(srpClientSession)
	clSession.sc = &srpCl
	clSession.init(srpSer.salt)

	// init session for server
	serSession := new(srpServerSession)
	serSession.ss = &srpSer
	serSession.init()

	// generate session keys
	serSession.genSessionKey(clSession.public)
	clSession.genSessionKey(serSession.public, serSession.u)

	if !bytes.Equal(serSession.session, clSession.session) {
		t.Fatalf("different session keys!: %x != %x", serSession.session, clSession.session)
	}

	t.Logf("client and server generated session keys successfully: %x", serSession.session)
}
